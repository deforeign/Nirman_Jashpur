import React, { useEffect, useState } from "react";
import axios from "axios";
import { useLocation, useNavigate, useParams } from "react-router-dom";
import "./Form.css";
import TopBar from "../Components/TopBar.jsx";
import useAuthStore from '../Store/useAuthStore.js'; // Import Zustand store

export default function TenderForm({ onLogout }) {
  const navigate = useNavigate();
  const { workId } = useParams();

  // Get authentication from Zustand store
  const { token, isAuthenticated, logout } = useAuthStore();

  // Form state
  const [form, setForm] = useState({
    tenderTitle: "",
    department: "",
    issuedDate: "",
    tenderId: "",
    document: null,
    remarks: "",
  });

  // Loading and error states
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [errors, setErrors] = useState({});

  useEffect(() => {
    document.title = "рдирд┐рд░реНрдорд╛рдг | рдирд┐рд╡рд┐рджрд╛ рдкреНрд░рдкрддреНрд░";
    
    // Debug workID
    console.log("ЁЯФН Tender Form - workID:", workId);
    
    if (!workId) {
      alert("рдХрд╛рд░реНрдп ID рдирд╣реАрдВ рдорд┐рд▓рд╛ред рдХреГрдкрдпрд╛ рд╡рд╛рдкрд╕ рдЬрд╛рдПрдВред");
      navigate(-1);
      return;
    }

    // Check authentication on component mount
    if (!isAuthenticated || !token) {
      alert("рдкреНрд░рдорд╛рдгреАрдХрд░рдг рдЖрд╡рд╢реНрдпрдХ рд╣реИред рдХреГрдкрдпрд╛ рд▓реЙрдЧрд┐рди рдХрд░реЗрдВред");
      navigate("/login");
      return;
    }
  }, [workId, navigate, isAuthenticated, token]);

  const handleChange = (e) => {
    const { name, value, files } = e.target;
    if (name === "document") {
      setForm((prev) => ({ ...prev, document: files[0] }));
    } else {
      setForm((prev) => ({ ...prev, [name]: value }));
    }
    
    // Clear error when user starts typing
    if (errors[name]) {
      setErrors(prev => ({ ...prev, [name]: '' }));
    }
  };

  // Form validation
  const validateForm = () => {
    const newErrors = {};
    
    if (!form.tenderTitle.trim()) {
      newErrors.tenderTitle = 'рдирд┐рд╡рд┐рджрд╛ рд╢реАрд░реНрд╖рдХ рдЖрд╡рд╢реНрдпрдХ рд╣реИ';
    }
    
    if (!form.department.trim()) {
      newErrors.department = 'рд╡рд┐рднрд╛рдЧ рдХрд╛ рдирд╛рдо рдЖрд╡рд╢реНрдпрдХ рд╣реИ';
    }
    
    if (!form.issuedDate) {
      newErrors.issuedDate = 'рдЬрд╛рд░реА рддрд┐рдерд┐ рдЖрд╡рд╢реНрдпрдХ рд╣реИ';
    }
    
    if (!form.tenderId.trim()) {
      newErrors.tenderId = 'рдирд┐рд╡рд┐рджрд╛ рдЖрдИрдбреА рдЖрд╡рд╢реНрдпрдХ рд╣реИ';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleLogout = () => {
    if (window.confirm("рдХреНрдпрд╛ рдЖрдк рд▓реЙрдЧрдЖрдЙрдЯ рдХрд░рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ?")) {
      logout(); // Use Zustand logout function
      navigate("/");
    }
  };

  const handleCancel = () => {
    navigate(-1);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    try {
      // тЬЕ Step 1: Form validation
      if (!validateForm()) {
        return;
      }

      // тЬЕ Step 2: Authentication check using Zustand store
      if (!isAuthenticated || !token) {
        alert("рдЖрдкрдХрд╛ рд╕рддреНрд░ рд╕рдорд╛рдкреНрдд рд╣реЛ рдЧрдпрд╛ рд╣реИред рдХреГрдкрдпрд╛ рдкреБрдирдГ рд▓реЙрдЧрд┐рди рдХрд░реЗрдВред");
        navigate("/login");
        return;
      }

      // тЬЕ Step 3: WorkID validation
      if (!workId) {
        alert("рдХрд╛рд░реНрдп ID рдирд╣реАрдВ рдорд┐рд▓рд╛ред рдХреГрдкрдпрд╛ рдкреЗрдЬ рд░реАрд▓реЛрдб рдХрд░реЗрдВред");
        return;
      }

      setIsSubmitting(true);

      // тЬЕ Step 4: Convert date to ISO format
      const convertToISODate = (dateString) => {
        if (!dateString) return null;
        const date = new Date(dateString);
        return date.toISOString();
      };

      // тЬЕ Step 5: Prepare payload according to API schema
      const payload = {
        tenderTitle: form.tenderTitle,
        tenderID: form.tenderId,  // Note: API expects 'tenderID', not 'tenderId'
        department: form.department,
        issuedDates: convertToISODate(form.issuedDate), // Note: API expects 'issuedDates'
        remark: form.remarks || ""  // Note: API expects 'remark', not 'remarks'
      };

      // ЁЯФН Debug logs
      console.log("ЁЯУд Submitting tender:");
      console.log("ЁЯЖФ Work ID:", workId);
      console.log("ЁЯУЛ Payload:", payload);

      // тЬЕ Step 6: API call with token from Zustand store
      const response = await axios.post(
        `http://localhost:3000/api/work-proposals/${workId}/tender/start`,
        payload,
        {
          headers: {
            "Content-Type": "application/json",
            "Authorization": `Bearer ${token}` // Use token from Zustand store
          },
        }
      );

      // тЬЕ Step 7: Handle document upload separately (if needed)
      if (form.document) {
        try {
          console.log("ЁЯУБ Document will be handled separately:", form.document.name);
          // You can implement document upload to a separate endpoint if needed
        } catch (fileError) {
          console.warn("тЪая╕П Document upload failed:", fileError);
        }
      }

      // тЬЕ Step 8: Success handling
      console.log("тЬЕ Tender started successfully:", response.data);
      alert("рдирд┐рд╡рд┐рджрд╛ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рд╢реБрд░реВ рдХреА рдЧрдИ!");
      
      // Reset form
      setForm({
        tenderTitle: "",
        department: "",
        issuedDate: "",
        tenderId: "",
        document: null,
        remarks: "",
      });
      
      // Clear file input
      const fileInput = document.getElementById("documentUpload");
      if (fileInput) {
        fileInput.value = "";
      }

      // Navigate back after delay
      setTimeout(() => {
        navigate(-1);
      }, 1500);

    } catch (error) {
      console.error("тЭМ Tender submission error:", error);
      
      if (error.response) {
        const { status, data } = error.response;
        console.error("ЁЯУН Response error:", status, data);
        
        switch (status) {
          case 400:
            if (data.message?.includes('ObjectId')) {
              alert("рдХрд╛рд░реНрдп ID рдХреА рд╕рдорд╕реНрдпрд╛ рд╣реИред рдХреГрдкрдпрд╛ рд╡рд╛рдкрд╕ рдЬрд╛рдХрд░ рд╕рд╣реА рдХрд╛рд░реНрдп рдЪреБрдиреЗрдВред");
              navigate(-1);
            } else {
              alert(`рдбреЗрдЯрд╛ рддреНрд░реБрдЯрд┐: ${data.message || 'рдЕрд╡реИрдз рдбреЗрдЯрд╛'}`);
            }
            break;
            
          case 401:
            alert("рдЖрдкрдХрд╛ рд╕рддреНрд░ рд╕рдорд╛рдкреНрдд рд╣реЛ рдЧрдпрд╛ рд╣реИред рдХреГрдкрдпрд╛ рдкреБрдирдГ рд▓реЙрдЧрд┐рди рдХрд░реЗрдВред");
            logout(); // Use Zustand logout function
            navigate("/login");
            break;
            
          case 403:
            alert("рдЖрдкрдХреЛ рдЗрд╕ рдХрд╛рд░реНрдп рдХреЛ рдХрд░рдиреЗ рдХреА рдЕрдиреБрдорддрд┐ рдирд╣реАрдВ рд╣реИред");
            break;
            
          case 404:
            alert("рдХрд╛рд░реНрдп рдкреНрд░рд╕реНрддрд╛рд╡ рдирд╣реАрдВ рдорд┐рд▓рд╛ред рд╣реЛ рд╕рдХрддрд╛ рд╣реИ рдпрд╣ рдкрд╣рд▓реЗ рд╕реЗ рд╣рдЯрд╛ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реЛред");
            navigate(-1);
            break;
            
          default:
            alert(`рд╕рд░реНрд╡рд░ рддреНрд░реБрдЯрд┐ (${status}): ${data.message || 'рдЕрдЬреНрдЮрд╛рдд рддреНрд░реБрдЯрд┐'}`);
        }
      } else if (error.request) {
        console.error("ЁЯУН Network error:", error.request);
        alert("рдиреЗрдЯрд╡рд░реНрдХ рддреНрд░реБрдЯрд┐ред рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ рдЗрдВрдЯрд░рдиреЗрдЯ рдХрдиреЗрдХреНрд╢рди рдЬрд╛рдВрдЪреЗрдВред");
      } else {
        console.error("ЁЯУН Request setup error:", error.message);
        alert("рдЕрдиреБрд░реЛрдз рддреНрд░реБрдЯрд┐ред рдХреГрдкрдпрд╛ рдкреЗрдЬ рд░реАрд▓реЛрдб рдХрд░рдХреЗ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред");
      }
    } finally {
      setIsSubmitting(false);
    }
  };

  // Show authentication error if not authenticated
  if (!isAuthenticated) {
    return (
      <div className="workorder-page">
        <div className="header">
          <TopBar onLogout={onLogout} />
          <div className="subbar">
            <span className="dot" />
            <h2>рдирд┐рд╡рд┐рджрд╛ рдкреНрд░рдкрддреНрд░</h2>
          </div>
        </div>
        <div className="wrap">
          <section className="panel">
            <div className="p-body" style={{ textAlign: 'center', padding: '50px' }}>
              <i className="fa-solid fa-lock" style={{ fontSize: '24px', marginBottom: '10px', color: 'orange' }}></i>
              <div style={{ color: 'orange', marginBottom: '20px' }}>
                рдкреНрд░рдорд╛рдгреАрдХрд░рдг рдЖрд╡рд╢реНрдпрдХ рд╣реИред рдХреГрдкрдпрд╛ рд▓реЙрдЧрд┐рди рдХрд░реЗрдВред
              </div>
              <button className="btn btn-primary" onClick={() => navigate('/login')}>
                <i className="fa-solid fa-sign-in-alt" /> рд▓реЙрдЧрд┐рди рдкреЗрдЬ рдкрд░ рдЬрд╛рдПрдВ
              </button>
            </div>
          </section>
        </div>
      </div>
    );
  }

  return (
    <div className="workorder-page">
      {/* Header */}
      <div className="header">
        <TopBar onLogout={onLogout} />

        <div className="subbar">
          <span className="dot" />
          <h2>рдирд┐рд╡рд┐рджрд╛ рдЬреЛрдбрд╝реЗрдВ - Work ID: {workId}</h2>
        </div>
      </div>

      {/* Form Card */}
      <div className="wrap">
        <section className="panel">
          <div className="panel-header">
            <h3>рдирд┐рд╡рд┐рджрд╛ рдкреНрд░рдкрддреНрд░</h3>
          </div>

          <form className="p-body" onSubmit={handleSubmit}>
            <div className="form-grid">
              <div className="form-group">
                <label className="form-label">
                  рдирд┐рд╡рд┐рджрд╛ рд╢реАрд░реНрд╖рдХ <span className="req">*</span>
                </label>
                <input
                  type="text"
                  name="tenderTitle"
                  className={`form-input ${errors.tenderTitle ? 'error' : ''}`}
                  placeholder="Construction of CC Road from Panchayat Bhavan to School"
                  value={form.tenderTitle}
                  onChange={handleChange}
                  disabled={isSubmitting}
                  required
                />
                {errors.tenderTitle && (
                  <span className="error-text">{errors.tenderTitle}</span>
                )}
              </div>

              <div className="form-group">
                <label className="form-label">
                  рд╡рд┐рднрд╛рдЧ <span className="req">*</span>
                </label>
                <input
                  type="text"
                  name="department"
                  className={`form-input ${errors.department ? 'error' : ''}`}
                  placeholder="Public Works Department"
                  value={form.department}
                  onChange={handleChange}
                  disabled={isSubmitting}
                  required
                />
                {errors.department && (
                  <span className="error-text">{errors.department}</span>
                )}
              </div>

              <div className="form-group">
                <label className="form-label">
                  рдЬрд╛рд░реА рддрд┐рдерд┐ <span className="req">*</span>
                </label>
                <div className="input-with-icon">
                  <input
                    type="date"
                    name="issuedDate"
                    className={`form-input ${errors.issuedDate ? 'error' : ''}`}
                    value={form.issuedDate}
                    onChange={handleChange}
                    disabled={isSubmitting}
                    required
                  />
                  <span className="cal-ic">ЁЯУЕ</span>
                </div>
                {errors.issuedDate && (
                  <span className="error-text">{errors.issuedDate}</span>
                )}
              </div>
            </div>

            <div className="form-grid">
              <div className="form-group">
                <label className="form-label">
                  рдирд┐рд╡рд┐рджрд╛ рдЖрдИрдбреА <span className="req">*</span>
                </label>
                <input
                  type="text"
                  name="tenderId"
                  className={`form-input ${errors.tenderId ? 'error' : ''}`}
                  placeholder="TDR/2025/0789"
                  value={form.tenderId}
                  onChange={handleChange}
                  disabled={isSubmitting}
                  required
                />
                {errors.tenderId && (
                  <span className="error-text">{errors.tenderId}</span>
                )}
              </div>

              {/* File Upload - Optional */}
              <div className="form-group file-input-wrapper">
                <label>рд╕рдВрд▓рдЧреНрди рджрд╕реНрддрд╛рд╡реЗрдЬрд╝ (рд╡реИрдХрд▓реНрдкрд┐рдХ)</label>
                <input
                  type="file"
                  name="document"
                  id="documentUpload"
                  className="file-input"
                  accept=".pdf,.doc,.docx,.jpg,.png"
                  onChange={handleChange}
                  disabled={isSubmitting}
                />
                <label htmlFor="documentUpload" className="custom-file-label">
                  рдлрд╝рд╛рдЗрд▓ рдЪреБрдиреЗрдВ
                </label>
                <span className="file-name">
                  {form.document ? form.document.name : "рдХреЛрдИ рдлрд╝рд╛рдЗрд▓ рдЪрдпрдирд┐рдд рдирд╣реАрдВ"}
                </span>
                <small className="help-text">
                  рдиреЛрдЯ: рджрд╕реНрддрд╛рд╡реЗрдЬрд╝ рдЕрдкрд▓реЛрдб рдЕрд▓рдЧ рд╕реЗ рд╕рдВрднрд╛рд▓рд╛ рдЬрд╛рдПрдЧрд╛
                </small>
              </div>
            </div>

            <div className="form-group full">
              <label className="form-label">рдЯрд┐рдкреНрдкрдгреА</label>
              <textarea
                name="remarks"
                className="form-input textarea"
                placeholder="Tender issued for road construction with proper drainage system"
                rows={5}
                value={form.remarks}
                onChange={handleChange}
                disabled={isSubmitting}
              />
            </div>

            <div className="form-actions">
              <button 
                type="submit" 
                className="btn btn-primary"
                disabled={isSubmitting || !workId}
              >
                {isSubmitting ? "рд╕рдмрдорд┐рдЯ рд╣реЛ рд░рд╣рд╛ рд╣реИ..." : "Submit"}
              </button>
              <button
                type="button"
                className="btn btn-ghost"
                onClick={handleCancel}
                disabled={isSubmitting}
              >
                Cancel
              </button>
            </div>
          </form>
        </section>
      </div>
    </div>
  );
}
